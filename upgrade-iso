#!/bin/bash
####################
### upgrade-iso ####
version="2.1" ######
### JustBrowsing ###
####################

isoFile=$(readlink -e "$@" 2>/dev/null);
mntDir="/opt/jb-iso"
tmpDir="/opt/jb-tmp"
buildDir="/opt/jb-build"
pkgDir="/opt/jb-pkg"
enableOVA="true"
force="false"
upload="false"
devMode="false"
folderDir="Nightlies"
flag="--nightly"


EXIT_STATUS() { echo "ERROR: $@"; CLEAN_UP; exit 1; }

CLEAN_UP() 
{
  echo "==> Cleanup";
  umount "${mntDir}/var/cache" "${mntDir}/tmp" "${mntDir}/proc/" "${mntDir}/sys/" "${mntDir}/dev/pts" "${mntDir}/dev/" 2>/dev/null;
  umount "$mntDir/*/*" 2>/dev/null;
  umount "$mntDir/*" 2>/dev/null;
  umount "$mntDir" 2>/dev/null;
  rm -rf "$mntDir"
  rm -rf "$buildDir/syslinux"
  rm -rf "$buildDir/tmp-dir"
  rm -rf "$tmpDir"
  mount -o remount,gid=5,mode=620 /dev/pts
}


# Check interactive
if [ "$1" = "-i" ]; then
  echo -e "\033[1m:::::> Interactive flag enabled\033[0m";
  shift;
  interactive="true";
  isoFile=$(readlink -e "$@" 2>/dev/null);
fi

# Check upload
if [ "$1" = "--upload" ]; then
  echo -e "\033[1m:::::> Upload flag enabled\033[0m";
  shift;
  upload="true";
  isoFile=$(readlink -e "$@" 2>/dev/null);
fi

# Check force
if [ "$1" = "--force" ]; then
  echo -e "\033[1m:::::> Force flag enabled\033[0m";
  shift; 
  force="true";
  isoFile=$(readlink -e "$@" 2>/dev/null);
fi

# Stable
if [ "$1" = "--stable" ]; then
  echo -e "\033[1m:::::> Stable enabled\033[0m";
  shift; 
  unset flag;
  isoFile=$(readlink -e "$@" 2>/dev/null);
fi

# Dev edition
if [ "$1" = "--devedition" ]; then
  echo -e "\033[1m:::::> Developer edition enabled\033[0m";
  shift; 
  devMode="true";
  folderDir="DevEdition";
  flag="--devedition";
  isoFile=$(readlink -e "$@" 2>/dev/null);
fi

# Autobuild support
if [ -z "$isoFile" ]; then
  latest=$(grep "Successfully built:" "${buildDir}/latest" 2>/dev/null | awk '{print $NF}');
  isoFile=$(readlink -e "$latest" 2>/dev/null);
fi

# Check depends
checkISO=$(file -F "|" "$isoFile" | awk -F "|" '{print $2}' | grep -o -e "ISO 9660" -e "x86 boot sector" -e "DOS/MBR boot");
ifSquash=$(which mksquashfs 2>/dev/null);
ifFS=$(which rebuild-fs 2>/dev/null);
ifImage=$(which squash-image 2>/dev/null);
ifSfs=$(which sfs2iso 2>/dev/null);
ifOVA=$(which iso2ova 2>/dev/null);
ifFRS=$(which frs-upload 2>/dev/null);
ifVBOX=$(which VBoxManage 2>/dev/null);
dirName=$(pwd);

[ -f "$isoFile" ] || EXIT_STATUS "file $isoFile does not exist"
[ ! -z "$checkISO" ] || EXIT_STATUS "$isoFile not a valid ISO file";
[ ! -z "$checkISO" ] && echo "==> Hybrid-ized ISO detected"
[ ! -z "$ifSquash" ] || EXIT_STATUS "Package squashfs-tools missing"

if [ ! -z "$ifFS" ]; then
  rebuildFS="rebuild-fs";
elif [ -f "$dirName/rebuild-fs" ]; then
  rebuildFS="$dirName/squash-image";
else
  EXIT_STATUS "Script rebuild-fs missing";
fi

if [ ! -z "$ifImage" ]; then
  squashImage="squash-image";
elif [ -f "$dirName/squash-image" ]; then
  squashImage="$dirName/squash-image";
else
  EXIT_STATUS "Script squash-image missing";
fi

if [ ! -z "$ifSfs" ]; then
  sfs2ISO="sfs2iso";
elif [ -f "$dirName/sfs2iso" ]; then
  sfs2ISO="$dirName/sfs2iso";
else
  EXIT_STATUS "Script sfs2iso missing";
fi

if [ ! -z "$ifOVA" ]; then
  iso2OVA="iso2ova";
elif [ -f "$dirName/iso2ova" ]; then
  iso2OVA="$dirName/iso2ova";
else
  enableOVA="false";
fi

if [ ! -z "$ifFRS" ]; then
  frsUpload="frs-upload";
elif [ -f "$dirName/frs-upload" ]; then
  frsUpload="$dirName/frs-upload";
else
  upload="false";
fi

if [ ! -z "$ifVBOX" -a "$enableOVA" = "true" ]; then
  buildOVA="true";
fi

# Setup
[ "$UID" = "0" ] || EXIT_STATUS "Need to be root"
mkdir -p "$mntDir" "$tmpDir" "$buildDir" &&
rm "${buildDir}/iso.log" "${buildDir}/ova.log" 2>/dev/null

# Mount ISO
mount -o loop "$isoFile" "$mntDir" &&
echo "==> Mounted $isoFile : $mntDir"
machine="i686"
[ -f "${mntDir}/arch/pkglist.x86_64.txt" ] && machine="x86_64"
echo "==> Preparing to build ${machine} image"

# Unpack image
mkdir -p "${buildDir}/syslinux/arch/any" &&
cp -r "${mntDir}/[BOOT]" "${mntDir}/EFI" "${mntDir}/isolinux" "${mntDir}/loader" "${buildDir}/syslinux/" &&
cp "${mntDir}/arch/aitab" "${buildDir}/syslinux/arch/"
cp "${mntDir}/arch/checksum.${machine}.md5" "${buildDir}/syslinux/arch/"
cp "${mntDir}/arch/pkglist.${machine}.txt" "${buildDir}/syslinux/arch/"
cp "${mntDir}/arch/flavor.jb" "${buildDir}/syslinux/arch/"
mkdir -p "${buildDir}/syslinux/arch/boot"/{i686,x86_64} &&
cp -r "${mntDir}/arch/boot/syslinux" "${buildDir}/syslinux/arch/boot/" &&

# Unsquash image
cd "$tmpDir" &&
unsquashfs "${mntDir}/arch/any/root-image.fs.sfs" &&
echo "==> Unsquashed to $tmpDir" &&
cd - > /dev/null &&
cp "${mntDir}/arch/boot/${machine}/vmlinuz" "${tmpDir}/vmlinuz-linux" &&
cp "${mntDir}/arch/boot/${machine}/archiso.img" "${tmpDir}/initramfs-linux.img" &&
umount "$mntDir" &&

# Expand image
echo "==> Rebuild Image Filesystem :: $rebuildFS" &&
mv "${tmpDir}/squashfs-root/root-image.fs" "${tmpDir}/squashfs-root/unclean-image.fs" &&
"$rebuildFS" "${tmpDir}/squashfs-root/unclean-image.fs" "${tmpDir}/squashfs-root/root-image.fs" 2000 &&
rm "${tmpDir}/squashfs-root/unclean-image.fs" &&

# Mount image
mount "${tmpDir}/squashfs-root/root-image.fs" "$mntDir" &&
echo "==> Mounted at: ${mntDir}" &&

# Upgrade packages
sed -i "s/^Architecture =.*/Architecture = ${machine}/g" "${mntDir}/etc/pacman.conf" &&
sed -i 's/^CheckSpace/#CheckSpace/g' "${mntDir}/etc/pacman.conf" &&
cp "${mntDir}/etc/fstab.working" "${mntDir}/etc/fstab" &&
cp "${mntDir}/etc/mtab.working" "${mntDir}/etc/mtab" &&
cp "${mntDir}/etc/mkinitcpio.conf.install" "${mntDir}/etc/mkinitcpio.conf" &&

mkdir "${buildDir}/var-cache" 2>/dev/null
mkdir "${buildDir}/tmp-dir"
mount -o bind,exec,rw "${buildDir}/var-cache" "${mntDir}/var/cache"
mount -o bind,exec,rw "${buildDir}/tmp-dir" "${mntDir}/tmp"
mkdir -p "${mntDir}/var/cache/pacman/pkg"
mkdir -p "${mntDir}/var/cache/apacman/pkg"
[ -d "${pkgDir}" ] && cp "${pkgDir}"/* "${buildDir}/var-cache/pacman/pkg/" 2>/dev/null;

# Enter chroot
echo "==> Mounting chroot: ${mntDir}"
mount -t proc proc "${mntDir}/proc/"
mount -t sysfs sys "${mntDir}/sys/"
mount -o bind /dev "${mntDir}/dev/"
mount -t devpts pts "${mntDir}/dev/pts"
mount -o remount,gid=5,mode=620 /dev/pts
cp "${mntDir}/etc/resolv.conf" "${mntDir}/etc/resolv.conf.working"
cp /etc/resolv.conf "${mntDir}/etc/resolv.conf"
cp "${tmpDir}/vmlinuz-linux" "${mntDir}/boot/vmlinuz-linux"
cp "${tmpDir}/initramfs-linux.img" "${mntDir}/boot/initramfs-linux.img"

read -t 5 -n 1 -p "==> Enter chroot (y/N): " input
echo "";
[ "$interactive" = "true" ] && input="Y"
if [[ "$input" = [Yy] ]]; then
  chroot "$mntDir" /bin/bash;
fi

# Check Firefox profile
FFpath="/home/user/.mozilla/firefox/oknp3n8p.default";
if [ -d "$mntDir/${FFpath}-backup" ]; then
  chroot "$mntDir" rm -rf "$FFpath";
  chroot "$mntDir" mv "${FFpath}-backup" "$FFpath";
fi

# Check Chrome profile
GCpath="/home/user/.config/google-chrome";
if [ -d "$mntDir/${GCpath}-backup" ]; then
  chroot "$mntDir" rm -rf "$GCpath";
  chroot "$mntDir" mv "${GCpath}-backup" "$GCpath";
fi

# Upgrade packages
chroot "$mntDir" mkdir -p /var/cache/{apacman,pacman}/pkg
chroot "$mntDir" pacman -Syu --noconfirm
chroot "$mntDir" pacman -S linux-headers xorg-server-devel perl --needed --noconfirm
chroot "$mntDir" /opt/justbrowsing/cleanup >/dev/null;

# Set login
echo '#!/bin/bash' > "${mntDir}/tmp/setrandom"
echo 'urandom=$(tr -dc A-Za-z0-9_ < /dev/urandom | head -c 128);' >> "${mntDir}/tmp/setrandom"
echo 'echo "${urandom}" > /opt/justbrowsing/stock' >> "${mntDir}/tmp/setrandom"
echo 'echo -e "${urandom}\n${urandom}" | passwd user 2>&1' >> "${mntDir}/tmp/setrandom"
chroot "$mntDir" chmod +x /tmp/setrandom
chroot "$mntDir" /tmp/setrandom
chroot "$mntDir" rm /tmp/setrandom 2>/dev/null

# Taste flavor
configEntry="${buildDir}/syslinux/arch/flavor.jb"
[ -f "$configEntry" ] && flavor=$(grep -o "distroName\S*" "$configEntry" | sed 's/^distroName=//')

# Edition differences
if [ "$devMode" = "true" ]; then
  chroot "$mntDir" mv /etc/X11/xorg.conf.d/10-disableVTs.conf{,.devmode} 2>/dev/null
  chroot "$mntDir" pacman -S roxterm openssh sudo --noconfirm --needed
  chroot "$mntDir" ln -s /usr/lib/systemd/sshd.service /etc/systemd/system/multi-user.target.wants/sshd.service 2>/dev/null
  chroot "$mntDir" sed -i '/^bindsym $mod+Return exec roxterm/d' "/home/user/.i3/config"
  chroot "$mntDir" sed -i '$ abindsym $mod+Return exec roxterm' "/home/user/.i3/config"
  chroot "$mntDir" sed -i 's/# %wheel ALL=(ALL) NOPASSWD: ALL/%wheel ALL=(ALL) NOPASSWD: ALL/g' /etc/sudoers
  cp ${buildDir}/syslinux/arch/boot/syslinux/{edition-d,splash}.png
  echo -e '#!/bin/sh\ntimestamp=$(date +%Y%m%d);' > "${mntDir}/tmp/setkey"
  echo 'echo -e "${timestamp}\n${timestamp}" | passwd root 2>&1' >> "${mntDir}/tmp/setkey"
  chroot "$mntDir" chmod +x /tmp/setkey
  chroot "$mntDir" /tmp/setkey
elif [ "$flavor" = "jb-next" ]; then
  chroot "$mntDir" mv /etc/X11/xorg.conf.d/10-disableVTs.conf{,.devmode} 2>/dev/null
  chroot "$mntDir" rm /tmp/setkey 2>/dev/null
  cp ${buildDir}/syslinux/arch/boot/syslinux/{edition-n,splash}.png
  chroot "$mntDir" pacman -S roxterm sudo --noconfirm --needed
  chroot "$mntDir" sed -i 's/# %wheel ALL=(ALL) NOPASSWD: ALL/%wheel ALL=(ALL) NOPASSWD: ALL/g' /etc/sudoers
  chroot "$mntDir" systemctl disable sshd 2>/dev/null
  chroot "$mntDir" pacman -Rss openssh --noconfirm
  chroot "$mntDir" passwd -l root
else
  chroot "$mntDir" passwd -l root
  chroot "$mntDir" rm /tmp/setkey 2>/dev/null
  cp ${buildDir}/syslinux/arch/boot/syslinux/{edition-n,splash}.png
  chroot "$mntDir" sed -i 's/^%wheel ALL=(ALL) NOPASSWD: ALL/# %wheel ALL=(ALL) NOPASSWD: ALL/g' /etc/sudoers 2>/dev/null
  chroot "$mntDir" sed -i '/^bindsym $mod+Return exec roxterm/d' "/home/user/.i3/config"
  chroot "$mntDir" systemctl disable sshd 2>/dev/null
  chroot "$mntDir" pacman -Rss roxterm --noconfirm
  chroot "$mntDir" pacman -Rss openssh --noconfirm
  chroot "$mntDir" pacman -Rss sudo --noconfirm
  chroot "$mntDir" mv /etc/X11/xorg.conf.d/10-disableVTs.{devmode,conf} 2>/dev/null
fi

# Generate initrd for livecd
chroot "$mntDir" pacman -S archiso --noconfirm
chroot "$mntDir" pacman -Su --noconfirm
cp "${mntDir}/etc/mkinitcpio.conf.livecd" "${mntDir}/etc/mkinitcpio.conf"
chroot "$mntDir" mkinitcpio -p linux
echo ":: Copy kernel and initrd to ${tmpDir}"
cp "${mntDir}/boot/vmlinuz-linux" "${tmpDir}/vmlinuz-linux"
cp "${mntDir}/boot/initramfs-linux.img" "${tmpDir}/initramfs-linux.img"
chroot "$mntDir" /opt/justbrowsing/cleanup >/dev/null;
chroot "$mntDir" df -h 2>/dev/null | grep /$;

# Enter choot again
read -t 5 -n 1 -p "==> Enter chroot (y/N): " input
echo "";
[ "$interactive" = "true" ] && input="Y"
if [[ "$input" = [Yy] ]]; then
  chroot "$mntDir" /bin/bash;
fi

# Upgrade AUR
updateAUR=$(chroot "$mntDir" apacman --auronly --quickcheck 2>/dev/null);
if [ ! -z "$updateAUR" ]; then
  chroot "$mntDir" apacman -S apacman-deps --needed --noconfirm
  chroot "$mntDir" apacman --auronly -Su --needed --noconfirm
  read -t 5 -n 1 -p "==> Enter chroot (y/N): " input
  echo "";
  [ "$interactive" = "true" ] && input="Y"
  if [[ "$input" = [Yy] ]]; then
    chroot "$mntDir" /bin/bash;
  fi;
fi

# Remove crud
chroot "$mntDir" pacman -Rss apacman-deps --noconfirm
chroot "$mntDir" pacman -S diffutils --needed --noconfirm
chroot "$mntDir" pacman -R linux-headers xorg-server-devel perl db --noconfirm
chroot "$mntDir" /opt/justbrowsing/cleanup >/dev/null;
umount "${mntDir}/var/cache"
chroot "$mntDir" /opt/justbrowsing/cleanup2 2>/dev/null;
chroot "$mntDir" df -h 2>/dev/null | grep /$;

# Update changelog
changeLog="${mntDir}/root/README.md";
nightlyHead="JustBrowsing Nightlies are untested, auto-built releases.\n=============\nNightly builds are based from the latest stable JustBrowsing release with the packages upgraded.\n\n\nChangelog:\n-------------";
nightlyTail="\n\n- - -\n[Build scripts](https://github.com/justbrowsing/justbrowsing-remaster)\n[Homepage](http://justbrowsing.info)";
echo "==> Packages upgraded:"
chroot "$mntDir" /opt/justbrowsing/pkglist
if [ "$force" != "true" ]; then
  [ -f "${mntDir}/root/pkgs.diff" ] || EXIT_STATUS "ISO not upgraded"
fi
echo -e "$nightlyHead" > "$changeLog"
date +"+   "%Y%m%d_nightly >> "$changeLog"
cat "${mntDir}/root/pkgs.log" >> "$changeLog"
echo -e "$nightlyTail" >> "$changeLog"
cp "$changeLog" "$buildDir"
chroot "$mntDir" pacman -Q > "${tmpDir}/pkglist.${machine}.txt"
cp "${tmpDir}/pkglist.${machine}.txt" "${builDir}/pkglist.${machine}.txt"

# Cleanup /boot
rm "${mntDir}/boot/vmlinuz-linux" 2>/dev/null;
rm "${mntDir}/boot/initramfs-linux.img" 2>/dev/null;
rm "${mntDir}/boot/initramfs-linux-fallback.img" 2>/dev/null;

# Exit chroot
umount "${mntDir}/var/cache" "${mntDir}/tmp" "${mntDir}/proc/" "${mntDir}/sys/" "${mntDir}/dev/pts" "${mntDir}/dev/"
sed -i "s/^Architecture = ${machine}/Architecture = auto/g" "${mntDir}/etc/pacman.conf"
[ "$devMode" = "true" -o "$flavor" = "jb-next" ] || sed -i 's/^#CheckSpace/CheckSpace/g' "${mntDir}/etc/pacman.conf" 
rm "${mntDir}/etc/fstab" "${mntDir}/etc/mtab" 
cp "${mntDir}/etc/resolv.conf.working" "${mntDir}/etc/resolv.conf"

# Remaster ISO
read -t 5 -n 1 -p "==> Repack image (Y/n): " input
echo "";
if [[ "$input" != [Nn] ]]; then
  umount "$mntDir" &&
  echo "==> Rebuild Image Filesystem :: $rebuildFS" &&
  mv "${tmpDir}/squashfs-root/root-image.fs" "${tmpDir}/squashfs-root/unclean-image.fs" &&
  "$rebuildFS" "${tmpDir}/squashfs-root/unclean-image.fs" "${tmpDir}/squashfs-root/root-image.fs" &&
  rm "${tmpDir}/squashfs-root/unclean-image.fs" &&
  echo "==> Squash Image :: $squashImage" &&
  "$squashImage" "${tmpDir}/squashfs-root/root-image.fs" "$mntDir" --noconfirm &&
  echo "==> Convert to ISO :: $sfs2ISO" &&
  "$sfs2ISO" "$tmpDir" "${buildDir}/syslinux" "$flag" | tee "${buildDir}/iso.log";
  isoStatus="$?";
  if [ "$devMode" = "false" -a "$machine" = "i686" ]; then
    [ "$isoStatus" = "0" ] && cp "${buildDir}/iso.log" "${buildDir}/latest";
  fi
  echo "[DONE]";
else
  CLEAN_UP; 
  exit 0;
fi

# Cleanup
CLEAN_UP

# Build Virtualbox OVA
if [ "$buildOVA" = "true" ]; then
  read -t 5 -n 1 -p "==> Build OVA (Y/n): " input
  echo "";
  if [[ "$input" != [Nn] ]]; then
    isoFile=$(grep "Successfully built:" "${buildDir}/iso.log" | awk '{print $NF}');
    modprobe vboxdrv
    echo "==> Convert to OVA :: $iso2OVA"
    "$iso2OVA" "$isoFile" | tee "${buildDir}/ova.log" &&
    ovaStatus="$?";
    if [ "$devMode" != "true" ]; then
      [ "$ovaStatus" = "0" ] && cp "${buildDir}/ova.log" "${buildDir}/latest-ova";
    fi
    echo "[DONE]";
  fi
fi

# Upload
if [ "$upload" != "false" ]; then
  read -t 5 -n 1 -p "==> Upload (Y/n): " input
  echo "";
  if [[ "$input" != [Nn] ]]; then

    isoRelease=$(grep "Successfully built:" "${buildDir}/iso.log" 2>/dev/null | awk '{print $NF}' | awk -F "_" '{print $2}');
    if [ -z "$flag" ]; then
      $frsUpload "$isoRelease" stable
    elif [ "$flag" = "--devedition" ]; then
      $frsUpload "$isoRelease" dev
    elif [ "$flag" = "--nightly" ]; then
      $frsUpload "$isoRelease" nightly
    fi

  fi
fi

### END ###
