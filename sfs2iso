#!/bin/bash
####################
### sfs2iso ########
version="0.3" ######
### JustBrowsing ###
####################

distro="justbrowsing";
timestamp=$(date +%Y%m%d);
squashDir=$(readlink -e "$1");
buildDir=$(readlink -e "$2");
[ "$3" = "--nightly" ] && timestamp="${timestamp}_nightly";
[ "$3" = "--tweak" ] && timestamp="${timestamp}_$(date +%T)";
output="${distro}_${timestamp}.iso"

exit_status()
{
  echo "==> ERROR: $@";
  exit 1;
}

# Sanity check
if [ ! -d "$1" -o ! -d "$2" ]; then
  echo "USAGE: $(basename $0) [squash directory] [syslinux directory]";
  exit 1;
fi


# Copy squashfs
[ -f "$squashDir/root-image.fs.sfs" ] || exit_status "File root-image.fs.sfs does not exist"
[ -f "$buildDir/arch/any/root-image.fs.sfs" ] && rm "$buildDir/arch/any/root-image.fs.sfs" 2>/dev/null
ln "$squashDir/root-image.fs.sfs" "$buildDir/arch/any/root-image.fs.sfs" || exit_status "Non-empty destination: $buildDir/arch/any/"

# Kernel and initrd
[ -f "$squashDir/vmlinuz-linux" ] || exit_status "File vmlinuz-linux does not exist"
cp "$squashDir"/vmlinuz-linux "$buildDir"/arch/boot/i686/vmlinuz || exit_status "Cannot copy i686 kernel"
[ -f "$squashDir/initramfs-linux.img" ] || exit_status "File initramfs-linux.img does not exist"
if [ ! -f "${buildDir}/arch/boot/i686/archiso.img" ]; then
  if [ -f "${squashDir}/initramfs-linux.img" ]; then
    cp "${squashDir}/initramfs-linux.img" "$buildDir"/arch/boot/i686/archiso.img || exit_status "Cannot copy i686 initrd"
  else
    cp "$squashDir"/archiso.img "$buildDir"/arch/boot/i686/archiso.img || exit_status "Cannot copy i686 initrd"
  fi
fi



# Build ISO
cd "$buildDir"

# Add timestamp
sed -i "s/^JustBrowsing.*/JustBrowsing $timestamp/g" arch/boot/syslinux/archiso_firefox.cfg
sed -i "s/^JustBrowsing.*/JustBrowsing $timestamp/g" arch/boot/syslinux/archiso_chrome.cfg
sed -i "s/^JustBrowsing.*/JustBrowsing $timestamp/g" arch/boot/syslinux/archiso_vmware.cfg

[ -f "isolinux/isolinux.bin" -a -f "isolinux/boot.cat" ] || exit_status "Wrong directory";
genisoimage -l -r -J -V "$distro" -b isolinux/isolinux.bin -no-emul-boot -boot-load-size 4 -boot-info-table \
	-c isolinux/boot.cat -o ../"$output" . || exit_status "genisoimage failed";
parentDir=$(dirname "$buildDir");

# Hybrid-ize ISO (allows USB boot)
isohybrid ../"$output" || exit_status "isohybrid failed"

# Cleanup
rm "$buildDir"/arch/any/root-image.fs.sfs 
echo "==> Successfully built: $parentDir/$output"

### END ###
